Git

1.  Git add(--all)
    это многофункциональная команда, она используется для добавления под версионный контроль новых файлов, для индексации изменений, а также для других целей, например для указания файлов с исправленным конфликтом слияния.

2.  Git status
    Показ состояния рабочего дерева.

 3. Git diff
    Показывает добавленные и удалённые строки (заплатку (patch)). 
    Cама по себе не показывает все изменения сделанные с последнего коммита — только те, что ещё не проиндексированы.
    git diff (git diff --staged) --cached - Показывает проиндексированные файлы.

 4. Git commit
    Фиксация изменений. Эта команда откроет выбранный вами текстовый редактор, в котором нужно прокомментировать изменения. 
    git commit -v - для более подробного напоминания, что же именно вы поменяли. Это приведёт к тому, что в комментарий будет также помещена дельта/diff изменений, 
                    таким образом вы сможете точно увидеть всё, что сделано.
    Каждый раз, когда вы делаете коммит, вы сохраняете снимок состояния вашего проекта, который позже вы можете восстановить или с которым можно сравнить текущее состояние.
    git commit -a - заставляет Git автоматически индексировать каждый уже отслеживаемый на момент коммита файл, позволяя обойтись без git add

5.  Git rm
    Удаление файлов из рабочего дерева и из индекса.
    git rm -f       - принудительное удаление, если файл изменен и проиндексирован. Это сделано для повышения безопасности, чтобы предотвратить ошибочное          
                      удаление данных, которые ещё не были записаны в снимок состояния и которые нельзя восстановить из Git'а.
    git rm --cached - удалить файл из индекса, оставив его при этом в рабочем каталоге. Другими словами, вы можете захотеть оставить файл на винчестере, и убрать 
                      его из-под бдительного ока Git'а. Это особенно полезно, если вы забыли добавить что-то в файл .gitignore и по ошибке проиндексировали, например, большой файл с логами, или кучу промежуточных файлов компиляции.
    git rm \*~ -      эта команда удаляет все файлы, чьи имена заканчиваются на ~.

6.  Git mv
    Переименования файла. Git mv file_from file_to.

7.  Git log 
    Выводит список коммитов созданных в данном репозитории в обратном хронологическом порядке. То есть самые последние коммиты показываются первыми.
    git log -p     - показывает дельту (разницу/diff), привнесенную каждым коммитом. 
    git log -<n>,  - где n это количество отображаемых коммитов. 
    git log --stat - краткая статистика по каждому коммиту

8.  Git commit
    Запись изменений в репозиторий.

9.  Git fetch [имя удал. сервера]
    Данная команда связывается с указанным удалённым проектом и забирает все те данные проекта, которых у вас ещё нет. После того как вы выполнили команду, у вас должны появиться ссылки на все ветки из этого удалённого проекта. Теперь эти ветки в любой момент могут быть просмотрены или слиты.
    Важно отметить, что команда fetch забирает данные в ваш локальный репозиторий, но не сливает их с какими-либо вашими наработками и не модифицирует то, над чем вы работаете в данный момент. Вам необходимо вручную слить эти данные с вашими, когда вы будете готовы.

10. Git remote
    Просмотр настроенных удаленных серверов. Перечисляет список имён-сокращений для всех уже указанных удалённых дескрипторов. Если вы склонировали ваш репозиторий, у вас должен отобразиться, по крайней мере, origin — это имя по умолчанию, которое Git присваивает серверу, с которого вы склонировали.
    git remote -v                  - какому URL соответствует сокращённое имя в Git, можно указать команде опцию
    git remote show [удал. сервер] - выдаёт URL удалённого репозитория, а также информацию об отслеживаемых ветках.
    git remote rename              - изменит сокращённое имя, используемое для удалённого репозитория. 
    git remote rm                  - удалить ссылку.

11. Git pull
    Автоматически извлекает и затем сливает данные из удалённой ветки в вашу текущую ветку. 
    Выполнение git pull, как правило, извлекает (fetch) данные с сервера, с которого вы изначально склонировали, и автоматически пытается слить (merge) их с кодом, над которым вы в данный момент работаете.

12. Git push [удал. сервер] [ветка]
    Отправить (push) ветку в главный репозиторий. 
    git push origin [имя метки] - отправка метки.

13. Git branch [name]
    Cписок имеющихся веток
    git branch -v          - просмотр последнего комита на каждой из веток.
    git branch [name]      - cоздаст новый указатель на тот самый коммит, на котором вы сейчас находитесь
    git branch --merged    - посмотреть те ветки, которые уже слиты с текущей
    git branch --no-merged - увидеть все ветки, содержащие наработки, которые вы пока ещё не слили в текущую ветку
    git branch -D          - удалить ветку и потерять наработки

14. Git checkout [name]
    перейти на существующую ветку
    git checkout -b [name] - создать ветку и сразу же перейти на неё

15. Git merge [name]
    Объединение двух веток в одну ([name] В master)






    








